AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Template for creating the AWS DMS to Hudi Infrastructure and Pipeline

Parameters:
  VpcSubnetIds:
    Type: String
    Description: >
      * Required *
      Comma separated list of two existing private subnets this stack will run in.
      eg: subnet-aaaaaaaa,subnet-bbbbbbbb

  DatabaseSecret:
    Type: String
    Description: >
      * Required *
      The AWS Secrets Manager secret that contains the database info, the following properties are expected:
        {
          "username": "<username>",
          "password": "<password>",
          "engine": "<mysql | oracle | postgres | mariadb | aurora | aurora-postgresql | sqlserver>",
          "host": "<db hostname>",
          "port": <db port>,
          "dbname": "<db name>"
        }

  DatabaseSchema:
    Type: String
    Description: The schema inside the source database to be migrated
    Default: public

  DmsDbCertificateArn:
    Type: String
    Description: >
      The AWS DMS Certificate arn used if encryption in transit with ca verification is required, if unset then
      'require' mode will be used with no ca verification
    Default: ''

  DmsDbExtraConnectionAttributes:
    Type: String
    Description: Extra connection attributes for the AWS DMS Endpoint, default assumes postgres
    Default: captureDDLs=N;pluginName=PGLOGICAL;heartbeatEnable=true;heartbeatSchema=awsdms

  DmsS3ExtraConnectionAttributes:
    Type: String
    Description: Extra connection attributes for the AWS DMS S3 Endpoint, default uses parquet with date partioning
    Default: dataFormat=parquet;datePartitionEnabled=true;datePartitionDelimiter=NONE;parquetTimestampInMillisecond=true;cdcMinFileSize=131072;cdcMaxBatchInterval=180;

  ReplicationInstanceClass:
    Type: String
    Description: The replication instance class, adjust based on your use case
    Default: dms.t3.micro

  ReplicationInstanceStorage:
    Type: Number
    Description: The size (in GB) of the replication instance local storage, adjust based on your use case
    Default: 100

  GlueDatabaseName:
    Type: String
    Description: The name of the glue database to create
    Default: 'hudi_lake_example'

  CreateReplicationTask:
    Type: String
    Description: >
      Whether to create the replication instance and task or not, set to FALSE by default in order to reduce running infrastructure
      * Recommendation: Set this to TRUE and update the stack after it has been successfully deployed with this set to FALSE
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'FALSE'

  IncrementalSchedule:
    Type: String
    Description: The schedule expression for the Hudi incremental jobs
    Default: rate(2 hours)
    AllowedPattern: (rate|cron)\(.*\)

  # For more information about EMR IAM roles: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-iam-roles.html
  EmrServiceRole:
    Type: String
    Default: "EMR_DefaultRole"
    Description: Service role for EMR clusters

  DeployExampleConfigs:
    Type: String
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'TRUE'
    Description: >
      Deploys example pipeline configurations in DynamoDB for a Postgresql hammerdb source
      for more about Hammerdb: https://www.hammerdb.com/about.html

  CreateDmsVpcRole:
    Type: String
    Description: >
      If DMS has not been previously used in this account, you will need to create the dms-vpc-role or DMS resources in this stack will fail
      With error: The IAM Role arn:aws:iam::${AccountId}:role/dms-vpc-role is not configured properly.
      This can be done through the GUI by manually configuring a Subnet group, or
      by Parameter CreateDmsVpcRole=TRUE in this template. If the role already exists, just set this to FALSE, otherwise TRUE
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'FALSE'

  UseLakeFormation:
    Type: String
    Description: >
      If LakeFormation has been configured in this AWS Account, set this to TRUE in order to configure LakeFormation for this stack
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'FALSE'

Conditions:
  SslCaVerification: !Not [!Equals [ !Ref DmsDbCertificateArn, '' ]]
  CreateReplicationTask: !Equals [ !Ref CreateReplicationTask, 'TRUE' ]
  DeployExampleConfigs: !Equals [ !Ref DeployExampleConfigs, 'TRUE' ]
  CreateDmsVpcRole: !Equals [ !Ref CreateDmsVpcRole, 'TRUE' ]
  UseLakeFormation: !Equals [ !Ref UseLakeFormation, 'TRUE' ]

Resources:
  #  If DMS has not been previously used in this account, you will need to create the dms-vpc-role or DMS resources in this stack will fail
  #  With error: The IAM Role arn:aws:iam::${AccountId}:role/dms-vpc-role is not configured properly.
  #  This can be done through the GUI by manually configuring a Subnet group, or
  #  by Parameter CreateDmsVpcRole=TRUE in this template. If the role already exists, just set this to FALSE
  DmsVpcRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Condition: CreateDmsVpcRole
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "dms.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Description: VPC Service role for DMS
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'

  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Data Lake database
        Name: !Ref GlueDatabaseName

  RawDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Description: Bucket for raw data
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Suspended                          # Warning: Should be enabled if deployed in Production

  CuratedDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Description: Bucket for curated data
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Suspended                          # Warning: Should be enabled if deployed in Production

  DmsSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    DependsOn: CuratedDataBucket
    Properties:
      ReplicationSubnetGroupDescription: Replication group for private subnets A and B
      SubnetIds:
        - !Select [ 0, !Split [ ',', !Ref VpcSubnetIds ] ]
        - !Select [ 1, !Split [ ',', !Ref VpcSubnetIds ] ]

  DmsDbEndpoint:
    Type: AWS::DMS::Endpoint
    DependsOn: CuratedDataBucket
    Properties:
      ResourceIdentifier: !Sub '${AWS::StackName}-db-endpoint'
      CertificateArn: !If [ SslCaVerification, !Ref DmsDbCertificateArn, !Ref AWS::NoValue ]
      DatabaseName: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:dbname}}'
      EndpointType: source
      EngineName: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:engine}}'
      ExtraConnectionAttributes: !Ref DmsDbExtraConnectionAttributes
      Password: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}'
      Port: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:port}}'
      ServerName: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:host}}'
      SslMode: !If [ SslCaVerification, 'verify-ca', 'require' ]
      Username: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}'

  DmsS3EndpointRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "dms.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Description: Role for DMS to Assume when writing to S3
      Policies:
        - PolicyName: DMS-S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ListAll
                Effect: Allow
                Action:
                  - s3:ListAllMybuckets
                Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
              - Sid: ListBucket
                Effect: Allow
                Action:
                  - s3:List*
                  - s3:Get*
                Resource:
                  - !GetAtt RawDataBucket.Arn
              - Sid: S3ObjectAccess
                Effect: Allow
                Action:
                  - s3:*Object*
                Resource:
                  - !Join [ '/', [ !GetAtt RawDataBucket.Arn, !Ref AWS::StackName ]]
                  - !Join [ '/', [ !GetAtt RawDataBucket.Arn, !Ref AWS::StackName, '*' ]]

  DmsS3Endpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointType: target
      EngineName: s3
      ResourceIdentifier: !Sub '${AWS::StackName}-s3-endpoint'
      S3Settings:
        BucketName: !Ref RawDataBucket
        BucketFolder: !Sub '${AWS::StackName}/{{resolve:secretsmanager:${DatabaseSecret}:SecretString:dbname}}/'
        ServiceAccessRoleArn: !GetAtt DmsS3EndpointRole.Arn
        CompressionType: gzip
      ExtraConnectionAttributes: !Ref DmsS3ExtraConnectionAttributes

  ReplicationInstance:
    Type: AWS::DMS::ReplicationInstance
    Condition: CreateReplicationTask
    Properties:
      ReplicationInstanceIdentifier: !Sub '${AWS::StackName}-instance'
      ResourceIdentifier: !Sub '${AWS::StackName}-instance'
      AllocatedStorage: !Ref ReplicationInstanceStorage
      AllowMajorVersionUpgrade: FALSE
      AutoMinorVersionUpgrade: TRUE
      EngineVersion: 3.4.6
      #  This will use the default aws managed dms encryption key
      KmsKeyId: !Ref AWS::NoValue
      MultiAZ: FALSE  # Maybe set to true if production
      PreferredMaintenanceWindow: 'Sat:20:00-Sun:04:00'
      PubliclyAccessible: FALSE
      ReplicationInstanceClass: !Ref ReplicationInstanceClass
      ReplicationSubnetGroupIdentifier: !Ref DmsSubnetGroup
      #  This will attach the default security group
      VpcSecurityGroupIds: !Ref AWS::NoValue

  ReplicationTask:
    Type: AWS::DMS::ReplicationTask
    Condition: CreateReplicationTask
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref ReplicationInstance
      ReplicationTaskIdentifier: !Sub '${AWS::StackName}-task'
      ResourceIdentifier: !Sub '${AWS::StackName}-task'
      SourceEndpointArn: !Ref DmsDbEndpoint
      TargetEndpointArn: !Ref DmsS3Endpoint
      ReplicationTaskSettings: >
        {
          "Logging": {
            "EnableLogging": true,
            "LogComponents": [
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "TRANSFORMATION"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "SOURCE_UNLOAD"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "IO"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "TARGET_LOAD"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "PERFORMANCE"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "SOURCE_CAPTURE"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "SORTER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "REST_SERVER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "VALIDATOR_EXT"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "TARGET_APPLY"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "TASK_MANAGER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "TABLES_MANAGER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "METADATA_MANAGER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "FILE_FACTORY"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "COMMON"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "ADDONS"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "DATA_STRUCTURE"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "COMMUNICATION"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "FILE_TRANSFER"
              }
            ]
          },
          "StreamBufferSettings": {
            "StreamBufferCount": 3,
            "CtrlStreamBufferSizeInMB": 5,
            "StreamBufferSizeInMB": 8
          },
          "ErrorBehavior": {
            "FailOnNoTablesCaptured": true,
            "ApplyErrorUpdatePolicy": "LOG_ERROR",
            "FailOnTransactionConsistencyBreached": false,
            "RecoverableErrorThrottlingMax": 1800,
            "DataErrorEscalationPolicy": "SUSPEND_TABLE",
            "ApplyErrorEscalationCount": 0,
            "RecoverableErrorStopRetryAfterThrottlingMax": true,
            "RecoverableErrorThrottling": true,
            "ApplyErrorFailOnTruncationDdl": false,
            "DataTruncationErrorPolicy": "LOG_ERROR",
            "ApplyErrorInsertPolicy": "LOG_ERROR",
            "ApplyErrorEscalationPolicy": "LOG_ERROR",
            "RecoverableErrorCount": -1,
            "DataErrorEscalationCount": 0,
            "TableErrorEscalationPolicy": "STOP_TASK",
            "RecoverableErrorInterval": 5,
            "ApplyErrorDeletePolicy": "IGNORE_RECORD",
            "TableErrorEscalationCount": 0,
            "FullLoadIgnoreConflicts": true,
            "DataErrorPolicy": "LOG_ERROR",
            "TableErrorPolicy": "SUSPEND_TABLE"
          },
          "TTSettings": {
            "TTS3Settings": null,
            "TTRecordSettings": null,
            "EnableTT": false
          },
          "FullLoadSettings": {
            "CommitRate": 10000,
            "StopTaskCachedChangesApplied": false,
            "StopTaskCachedChangesNotApplied": false,
            "MaxFullLoadSubTasks": 8,
            "TransactionConsistencyTimeout": 600,
            "CreatePkAfterFullLoad": false,
            "TargetTablePrepMode": "DO_NOTHING"
          },
          "TargetMetadata": {
            "ParallelApplyBufferSize": 0,
            "ParallelApplyQueuesPerThread": 0,
            "ParallelApplyThreads": 0,
            "TargetSchema": "",
            "InlineLobMaxSize": 0,
            "ParallelLoadQueuesPerThread": 0,
            "SupportLobs": true,
            "LobChunkSize": 0,
            "TaskRecoveryTableEnabled": false,
            "ParallelLoadThreads": 0,
            "LobMaxSize": 32,
            "BatchApplyEnabled": false,
            "FullLobMode": false,
            "LimitedSizeLobMode": true,
            "LoadMaxFileSize": 0,
            "ParallelLoadBufferSize": 0
          },
          "BeforeImageSettings": null,
          "ControlTablesSettings": {
            "historyTimeslotInMinutes": 5,
            "HistoryTimeslotInMinutes": 5,
            "StatusTableEnabled": true,
            "SuspendedTablesTableEnabled": true,
            "HistoryTableEnabled": true,
            "ControlSchema": "control_tables",
            "FullLoadExceptionTableEnabled": false
          },
          "LoopbackPreventionSettings": null,
          "CharacterSetSettings": null,
          "FailTaskWhenCleanTaskResourceFailed": false,
          "ChangeProcessingTuning": {
            "StatementCacheSize": 50,
            "CommitTimeout": 1,
            "BatchApplyPreserveTransaction": true,
            "BatchApplyTimeoutMin": 1,
            "BatchSplitSize": 0,
            "BatchApplyTimeoutMax": 30,
            "MinTransactionSize": 1000,
            "MemoryKeepTime": 60,
            "BatchApplyMemoryLimit": 500,
            "MemoryLimitTotal": 1024
          },
          "ChangeProcessingDdlHandlingPolicy": {
            "HandleSourceTableDropped": true,
            "HandleSourceTableTruncated": true,
            "HandleSourceTableAltered": true
          }
        }
      TableMappings: !Sub
        - >
          {
              "rules": [
                  {
                      "rule-type": "selection",
                      "rule-id": "0",
                      "rule-name": "select-all",
                      "object-locator": {
                          "schema-name": "${DatabaseSchema}",
                          "table-name": "%"
                      },
                      "rule-action": "include",
                      "filters": []
                  },
                  {
                      "rule-type": "transformation",
                      "rule-id": "12",
                      "rule-name": "add-trx-seq",
                      "rule-target": "column",
                      "object-locator": {
                          "schema-name": "%",
                          "table-name": "%"
                      },
                      "rule-action": "add-column",
                      "value": "trx_seq",
                      "expression": "$AR_H_CHANGE_SEQ",
                      "data-type": {
                          "type": "string",
                          "length": 50
                      }
                  },
                  {
                      "rule-type": "transformation",
                      "rule-id": "14",
                      "rule-name": "add-hudi-deleted",
                      "rule-target": "column",
                      "object-locator": {
                          "schema-name": "%",
                          "table-name": "%"
                      },
                      "rule-action": "add-column",
                      "value": "_hoodie_is_deleted",
                      "expression": "CASE WHEN $AR_H_OPERATION = 'DELETE' THEN TRUE ELSE FALSE END",
                      "data-type": {
                          "type": "boolean"
                      }
                  },
                  {
                      "rule-type": "post-processing",
                      "rule-id": "20",
                      "rule-name": "add-tags",
                      "rule-action": "add-tag",
                      "object-locator": {
                          "schema-name": "%",
                          "table-name": "%"
                      },
                      "tag-set": [
                        {
                          "key": "source_dbname",
                          "value": "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:dbname}}"
                        },
                        {
                          "key": "source_endpoint",
                          "value": "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:host}}"
                        },
                        {
                         "key": "schema_name",
                         "value": "${SCHEMA_NAME}"
                        },
                        {
                          "key": "table_name",
                          "value": "${TABLE_NAME}"
                        },
                        {
                          "key": "glue_table_name",
                          "value": "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:dbname}}_${SCHEMA_NAME}_${TABLE_NAME}"
                        },
                        {
                           "key": "glue_db_name",
                           "value": "${GlueDatabaseName}"
                        }
                      ]
                  }
              ]
          }
        - TABLE_NAME: '${table-name}'
          SCHEMA_NAME: '${schema-name}'

  EmrEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to attach to EMR EC2 JobFlow roles
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ResourceStar
            Effect: Allow
            Action:
              - ec2:Describe*
              - elasticmapreduce:Describe*
              - elasticmapreduce:ListBootstrapActions
              - elasticmapreduce:ListClusters
              - elasticmapreduce:ListInstanceGroups
              - elasticmapreduce:ListInstances
              - elasticmapreduce:ListSteps
              - cloudwatch:*
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets*
              - glue:*Get*
              - lakeformation:GetDataAccess
              - lakeformation:GetMetadataAccess
            Resource: '*'
          - Sid: ListAll
            Effect: Allow
            Action:
              - s3:ListAllMybuckets
            Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
          - Sid: S3ListAndRead
            Effect: Allow
            Action:
              - s3:List*
              - s3:Get*
            Resource:
              - !GetAtt RawDataBucket.Arn
              - !GetAtt CuratedDataBucket.Arn
              - !Join [ '/', [ !GetAtt RawDataBucket.Arn, '*' ] ]
              - !Join [ '/', [ !GetAtt CuratedDataBucket.Arn, '*' ] ]
              - !Sub 'arn:${AWS::Partition}:s3:::aws-logs-${AWS::AccountId}-${AWS::Region}'
              - !Sub 'arn:${AWS::Partition}:s3:::aws-logs-${AWS::AccountId}-${AWS::Region}/*'
          - Sid: S3ObjectAccess
            Effect: Allow
            Action:
              - s3:*Object*
            Resource:
              - !Join [ '/', [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName ] ]
              - !Join [ '', [ !GetAtt CuratedDataBucket.Arn, '/', !Ref AWS::StackName, '_$folder$' ] ]
              - !Join [ '/', [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName, '' ] ]
              - !Join [ '/', [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName, '*' ] ]
              - !Sub 'arn:${AWS::Partition}:s3:::aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/${AWS::StackName}/*'
              - !Sub 'arn:${AWS::Partition}:s3:::aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/${AWS::StackName}'
          - Sid: GlueAccountLevel
            Effect: Allow
            Action:
              - glue:CreateTable
              - glue:UpdateTable
              - glue:DeleteTable
              - glue:CreatePartition
              - glue:BatchCreatePartition
              - glue:UpdatePartition
              - glue:DeletePartition
              - glue:BatchDeletePartition
            Resource:
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabaseName}'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabaseName}/*'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:tableVersion/${GlueDatabaseName}/*'

  EmrEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Description: Role for EMR EC2 instances
      ManagedPolicyArns:
        - !Ref EmrEc2Policy
      MaxSessionDuration: 43200

  LakeFormationLocationRole:
    Type: AWS::IAM::Role
    Condition: UseLakeFormation
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lakeformation.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Description: Service role for LakeFormation
      MaxSessionDuration: 43200
      Policies:
        - PolicyName: LakeFormation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ListAll
                Effect: Allow
                Action:
                  - s3:ListAllMybuckets
                Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
              - Sid: ListBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt CuratedDataBucket.Arn
              - Sid: S3ObjectAccess
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Join ["/", [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName, '*' ] ]
                  - !Join [ '/', [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName ] ]

  CuratedLakeLocationResource:
    Type: AWS::LakeFormation::Resource
    DependsOn: [ CuratedDataBucket, LakeFormationLocationRole ]
    Condition: UseLakeFormation
    Properties:
      ResourceArn: !Join [ "/", [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName, !Ref GlueDatabaseName ] ]
      # ServiceLinkedRole does not properly delete using CloudFormation so using a traditional IAM role
      UseServiceLinkedRole: FALSE
      RoleArn: !GetAtt LakeFormationLocationRole.Arn

  EmrEc2CuratedDbPermissions:
    Type: AWS::LakeFormation::Permissions
    DependsOn: [ EmrEc2Role, GlueDatabase ]
    Condition: UseLakeFormation
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt EmrEc2Role.Arn
      Permissions:
        - ALL
      Resource:
        DatabaseResource:
          CatalogId: !Ref AWS::AccountId
          Name: !Ref GlueDatabaseName

  EmrEc2CuratedTargetLocationPermissions:
    Type: AWS::LakeFormation::Permissions
    DependsOn: CuratedLakeLocationResource
    Condition: UseLakeFormation
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt EmrEc2Role.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          CatalogId: !Ref AWS::AccountId
          S3Resource: !Join [ "/", [ !GetAtt CuratedDataBucket.Arn, !Ref AWS::StackName, !Ref GlueDatabaseName ] ]

  EmrEc2CuratedTablePermissions:
    Type: AWS::LakeFormation::Permissions
    Condition: UseLakeFormation
    DependsOn: [ EmrEc2Role, GlueDatabase ]
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt EmrEc2Role.Arn
      Permissions:
        - ALL
      Resource:
        TableResource:
          CatalogId: !Ref AWS::AccountId
          DatabaseName: !Ref GlueDatabaseName
          TableWildcard: {}

  EmrEc2InstanceProfile:
    DependsOn: EmrEc2Role
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref EmrEc2Role
      Roles:
        - !Ref EmrEc2Role

  RuntimeSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${AWS::StackName}-Runtime-SNS'

  RuntimeSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowServices
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - cloudwatch.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              - !Ref RuntimeSnsTopic
      Topics:
        - !Ref RuntimeSnsTopic

  EmrStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "states.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Description: Role for EMR pipeline state machine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEMRFullAccessPolicy_v2
      MaxSessionDuration: 43200
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: PassRole
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt EmrEc2Role.Arn
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${EmrServiceRole}'
              - Sid: AllowSns
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref RuntimeSnsTopic

  ConfigTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: identifier
          AttributeType: S
        - AttributeName: config
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: identifier
          KeyType: HASH
        - AttributeName: config
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: TRUE

  EmrStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: s3://aws-dms-to-hudi-example/artifacts/stepfunctions/emr1.json
      DefinitionSubstitutions:
        EmrEc2SubnetIdA: !Select [ 0, !Split [ ',', !Ref VpcSubnetIds ] ]
        EmrEc2SubnetIdB: !Select [ 1, !Split [ ',', !Ref VpcSubnetIds ] ]
        EmrLogUri: !Sub 's3n://aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/${AWS::StackName}/'
        EmrServiceRole: !Ref EmrServiceRole
        EmrJobFlowRole: !Ref EmrEc2Role
        RuntimeSnsTopicArn: !Ref RuntimeSnsTopic
        Region: !Ref AWS::Region
      Role: !GetAtt EmrStepFunctionRole.Arn
      Type: STANDARD

  LaunchEmrPipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        "Version": "2012-10-17"
        "Statement":
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Description: Role for lambda to launch emr step function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LaunchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: DynamoDB
                Effect: Allow
                Action:
                  - dynamodb:Describe*
                  - dynamodb:Query
                  - dynamodb:*GetItem*
                Resource: !GetAtt ConfigTable.Arn
              - Sid: StepFunction
                Effect: Allow
                Action:
                  - states:*Execution*
                  - states:Describe*
                Resource:
                  - !Ref EmrStepFunction
                  - !Join [':', [
                      !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution',
                      !GetAtt EmrStepFunction.Name,
                      '*'
                    ]]
              - Sid: AllowSns
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref RuntimeSnsTopic

  LaunchEmrPipelineLambda:
    Type: AWS::Serverless::Function
    DependsOn: LaunchEmrPipelineLambdaRole
    Properties:
      CodeUri: s3://aws-dms-to-hudi-example/artifacts/lambdas/launch_hudi.zip
      Description: Lambda Function for launching the EMR step function
      Environment:
        Variables:
          STEPFUNCTION_ARN: !Ref EmrStepFunction
          CONFIG_TABLE: !Ref ConfigTable
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: LaunchEmrSfn
          CURATED_LAKE_S3URI: !Join [ '', [ 's3://', !Ref CuratedDataBucket, '/', !Ref AWS::StackName ] ]
          RAW_LAKE_S3URI: !Join [ '', [ 's3://', !Ref RawDataBucket, '/', !Ref AWS::StackName ] ]
          TOPIC_ARN: !Ref RuntimeSnsTopic
          GLUE_DATABASE: !Ref GlueDatabaseName
      Handler: handler.handler
      Role: !GetAtt LaunchEmrPipelineLambdaRole.Arn
      Runtime: python3.9
      Timeout: 90

  IncrementalLoadSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Invoke periodic incremental updates of the hudi tables
      ScheduleExpression: !Ref IncrementalSchedule
      State: DISABLED
      Targets:
        - Arn: !GetAtt LaunchEmrPipelineLambda.Arn
          Id: !Ref LaunchEmrPipelineLambda
          Input: !Sub >
            {
              "Identifier": "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:dbname}}",
              "PipelineType": "hudi_upsert"
            }

  PipelineConfigLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        "Version": "2012-10-17"
        "Statement":
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Description: Role for lambda to launch emr step function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LaunchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: DynamoDB
                Effect: Allow
                Action:
                  - dynamodb:Describe*
                  - dynamodb:Query
                  - dynamodb:*Item*
                Resource: !GetAtt ConfigTable.Arn

  PipelineConfigLambda:
    Type: AWS::Serverless::Function
    DependsOn: PipelineConfigLambdaRole
    Properties:
      CodeUri: s3://aws-dms-to-hudi-example/artifacts/lambdas/deploy_pipeline_configs.zip
      Description: Lambda Function for deploying pipeline configs into DynamoDB
      Environment:
        Variables:
          CONFIG_TABLE: !Ref ConfigTable
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: PipelineConfigLambda
      Handler: handler.handler
      Role: !GetAtt PipelineConfigLambdaRole.Arn
      Runtime: python3.9
      Timeout: 90

  DeployExampleConfig:
    Type: 'Custom::DeployExampleConfig'
    Condition: DeployExampleConfigs
    DependsOn: PipelineConfigLambda
    Properties:
      ServiceToken: !GetAtt PipelineConfigLambda.Arn
      DeployExampleConfigs: 'TRUE'